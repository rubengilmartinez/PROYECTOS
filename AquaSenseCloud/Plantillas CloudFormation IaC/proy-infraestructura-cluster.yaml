AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Plantilla para desplegar un clúster ECS con balanceador de carga ALB que redirige el tráfico de los clientes desde el puerto 80 (HTTP) hasta el puerto 5000 de las
  tareas donde se encuentra el contenedor de la aplicación AquaSense.

Parameters:
  ECSServiceName:
    Type: String
    Description: Nombre del servicio ECS
  NetworkStackName:
    Type: String
    Description: Nombre de la pila de red

Resources:
  # Cluster ECS
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "${ECSServiceName}-Cluster"

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Permitir acceso al balanceador de carga ALB"
      VpcId:
        Fn::ImportValue: !Sub ${NetworkStackName}-VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  TaskSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow traffic from ALB to ECS tasks"
      VpcId:
        Fn::ImportValue: !Sub ${NetworkStackName}-VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5000
          ToPort: 5000
          SourceSecurityGroupId: !Ref ALBSecurityGroup

  # Balanceador de carga ALB
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub "${ECSServiceName}-ALB"
      IpAddressType: ipv4
      SecurityGroups: 
        - !Ref ALBSecurityGroup
      Subnets:
        - Fn::ImportValue: !Sub ${NetworkStackName}-PublicSubnet1Id
        - Fn::ImportValue: !Sub ${NetworkStackName}-PublicSubnet2Id

  ECSLoadBalancerTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "${ECSServiceName}-TargetGroup"
      Port: 5000
      Protocol: HTTP
      VpcId:
        Fn::ImportValue: !Sub ${NetworkStackName}-VpcId
      TargetType: ip
      HealthCheckPath: "/health"
      Matcher:
        HttpCode: "200"

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: "forward"
          TargetGroupArn: !Ref ECSLoadBalancerTargetGroup
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP

  # Definición de tarea ECS
  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub "${ECSServiceName}-Task"
      ExecutionRoleArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/LabRole"
      TaskRoleArn: !Sub "arn:aws:iam::${AWS::AccountId}:role/LabRole"
      RequiresCompatibilities:
        - FARGATE
      Cpu: "256"
      Memory: "512"
      NetworkMode: awsvpc
      ContainerDefinitions:
        - Name: !Sub "${ECSServiceName}-Container"
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/proy-repo-aquasense:latest"
          PortMappings:
            - ContainerPort: 5000
              Protocol: tcp
              
  # Servicio ECS
  ECSService:
    Type: AWS::ECS::Service
    DependsOn: ALB
    Properties:
      ServiceName: !Sub "${ECSServiceName}-Service"
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref ECSTaskDefinition
      DesiredCount: 2
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - Fn::ImportValue: !Sub ${NetworkStackName}-PublicSubnet1Id
            - Fn::ImportValue: !Sub ${NetworkStackName}-PublicSubnet2Id
          SecurityGroups:
            - !Ref TaskSecurityGroup
      LoadBalancers:
        - TargetGroupArn: !Ref ECSLoadBalancerTargetGroup
          ContainerName: !Sub "${ECSServiceName}-Container"
          ContainerPort: 5000

  # Escalado automático horizontal(Utilización de CPU)
  ECSServiceScalingTarget:
    DependsOn: ECSService
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 10
      MinCapacity: 2
      ResourceId: !Sub "service/${ECSCluster}/${ECSServiceName}-Service"
      RoleARN: !Sub "arn:aws:iam::${AWS::AccountId}:role/LabRole"
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

  ECSServiceScalingPolicyHighCPU:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub "${ECSServiceName}-ScaleUp"
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ECSServiceScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 75.0
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleOutCooldown: 60
        ScaleInCooldown: 60

  ECSServiceScalingPolicyLowCPU:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub "${ECSServiceName}-ScaleDown"
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ECSServiceScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 25.0
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleOutCooldown: 60
        ScaleInCooldown: 60


Outputs:
  LoadBalancerDNSName:
    Description: DNS del ALB
    Value: !GetAtt ALB.DNSName
